Hey, this is my task for a university assignment:

Task Description
You must create an Express.js API designed to retrieve user profile data from a simulated database and cache responses to enhance performance.
Expected Functionality:
- Data Retrieval and Caching:
    - Upon a GET /user/:id request:
        - Fetch the corresponding user data from the simulated database.
        - Cache the retrieved data so that subsequent requests for the same user ID return instantly without accessing the database.
        - For non-existent users, respond with a 404 error.
- Input Handling:
    - The API should correctly process both existing (/user/1, /user/2) and non-existent (/user/999) user IDs.
    - It should manage multiple consecutive requests efficiently to test the caching mechanism.
- Cache Management:
    - Ensure that the cache correctly stores and retrieves data based on the user ID type.
    - Implement a cache eviction policy to prevent unbounded memory usage over time.
- Performance and Reliability:
    - The API must be free from hidden performance issues, memory leaks, or race conditions.
    - It should handle concurrent requests gracefully without degrading performance or causing data inconsistencies.

Additional Requirements:
- Memory Usage Monitoring:
    - Conduct stress tests by simulating a high volume of requests to assess the API's memory consumption.
    - Monitor the application's memory usage over time to detect any signs of memory leaks, such as continuous memory growth without release.
- Cache Eviction Policy:
    - Implement and document a cache eviction strategy (e.g., Least Recently Used) to manage the cache size and prevent excessive memory consumption.
- Concurrency Testing:
    - Perform tests with simultaneous requests to ensure that the caching mechanism handles concurrency without leading to race conditions or data corruption.

Evaluation Criteria:
- Correctness: The API returns accurate responses for both cached and non-cached requests.
- Efficiency: The caching mechanism significantly reduces response times for repeated requests.
- Robustness: The API maintains consistent performance under load and does not exhibit memory leaks or race conditions.
- Scalability: The implemented cache eviction policy effectively manages memory usage as the number of unique user requests increases.

Could you please run my solution (in code.js) and ensure that it addresses all of these points?
Please debug any errors.   
If you need to change the code, please place the new code in 'code_updated.js', and leave the original file untouched.